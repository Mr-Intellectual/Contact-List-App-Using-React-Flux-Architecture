import { validate } from "webpack"

{store.list.length !== 0 ? (
  store.list.map((item, index) => (
    // <li
    //   className="list-group-item d-flex justify-content-between align-items-center  border border-2 border border-primary p-1"
    //   key={index}
    // >
    //   <p className="m-0 px-2 text-break">
    //     {item["Task Info"]}
    //   </p>
    //   <button
    //     onClick={() => actions.trashIcon(index)}
    //     className=" btn btn-outline-danger btn-sm"
    //     type="button"
    //     id="trash"
    //   >
    //     <i className="fa-regular fa-trash-can"></i>
    //   </button>
    // </li>

    <li className="list-group-item border-2 p-2 border border-2 rounded-3" key={index}>
    <div className="row">
      <div className="col-sm-4 col-md-3 col-lg-3 text-center ">
        <img
          src="https://picsum.photos/200/200?grayscale"
          className="rounded-circle img-fluid"
          alt="..."
          style={{
            objectFit: "cover",
          }}
        />
      </div>

      <div className="col-sm-8 col-md-9 col-lg-7 d-flex flex-column">
        <div className=" py-1 my-1">
          <p className="h4 m-0">{item["First Name"] + " " + item["Last Name"] }</p>
        </div>
        <div className="">
          <div className="my-1">
            <i className="fa-solid fa-location-crosshairs fa-lg"></i>
            <p className="fs-4 d-inline-block ms-2 mb-2">{item["Address"]}</p>
          </div>
          <div className="my-1">
            <i className="fa-solid fa-mobile-screen-button fa-lg"></i>
            <p className="fs-5 d-inline-block ms-2 mb-2">{item["Phone"]}</p>
          </div>
          <div className="my-1">
            <i className="fa-solid fa-envelope-circle-check fa-lg"></i>
            <p className="fs-6 d-inline-block ms-2 mb-2">{item["E-Mail"]}</p>
          </div>
        </div>
      </div>
      <div className="col-sm-12 col-md-12 col-lg-2 my-2 py-2">
        <div className="col-6 col-sm-6 text-center d-inline-block px-1">
          <button
            className="btn btn-outline-black btn-sm mx-0 w-100"
            type="button"
          >
            <i className="fa-solid fa-pen fa-lg"></i>
          </button>
        </div>
        <div className="col-6 col-sm-6 text-center d-inline-block px-1">
          <button
            className="btn btn-outline-black btn-sm mx-0 w-100"
            type="button"
          >
            <i className="fa-solid fa-trash fa-lg"></i>
          </button>
        </div>
      </div>
    </div>
  </li>

    

  ))
) : (
  <li className="list-group-item d-flex justify-content-between align-items-center border border-2 border border-primary border border-3 p-2">
    Please add some task to the list...
  </li>
)}




// =======================================================================










<li className="list-group-item border-2 p-2 border border-2 rounded-3 ">
<div className="row">
  <div className="col-sm-4 col-md-3 col-lg-3 text-center ">
    <img
      src="https://picsum.photos/200/200?grayscale"
      className="rounded-circle img-fluid"
      alt="..."
      style={{
        objectFit: "cover",
      }}
    />
  </div>


  <div>
        <p className="mt-4 fs-4">There is Nothing Here... Click the Button to Add Tasks</p>
      </div>
      <Link className="m-4 p-2 d-grid" to="/todo">
        <button
          className=" btn btn-outline-dark btn-lg my-1"
          type="button"
          id="link"
        >
          <i className="fa-regular fa-hand-point-right pr-2 m-1 fa-lg"></i>
          Click Here To Add Tasks
        </button>
      </Link>


  {/* <div className="col-sm-8 col-md-9 col-lg-7 d-flex flex-column  ">
    <div className=" py-1 my-1">
      <p className="h4 m-0">Reo Petersen</p>
    </div>
    <div className="">
      <div className="my-1">
        <i className="fa-solid fa-location-crosshairs fa-lg"></i>
        <p className="fs-4 d-inline-block ms-2 mb-2">Address</p>
      </div>
      <div className="my-1">
        <i className="fa-solid fa-mobile-screen-button fa-lg"></i>
        <p className="fs-5 d-inline-block ms-2 mb-2">Phone</p>
      </div>
      <div className="my-1">
        <i className="fa-solid fa-envelope-circle-check fa-lg"></i>
        <p className="fs-6 d-inline-block ms-2 mb-2">Email</p>
      </div>
    </div>
  </div>
  <div className="col-sm-12 col-md-12 col-lg-2 my-2 py-2">
    <div className="col-6 col-sm-6 text-center d-inline-block px-1">
      <button
        className="btn btn-outline-black btn-sm mx-0 w-100"
        type="button"
      >
        <i className="fa-solid fa-pen fa-lg"></i>
      </button>
    </div>
    <div className="col-6 col-sm-6 text-center d-inline-block px-1">
      <button
        className="btn btn-outline-black btn-sm mx-0 w-100"
        type="button"
      >
        <i className="fa-solid fa-trash fa-lg"></i>
      </button>
    </div>
  </div> */}
</div>
</li>















// =======================================================================

// =======================================================================


I want the contactHolder values to check their empty in the saveButton function

const getState = ({ getStore, getActions, setStore }) => {

return {
  store: {
    list: [
      // {
      // 	"First Name": "Cookie",
      // 	"Last Name": "Monster",
      // 	"E-Mail": "SesameCookie@gmail.com",
      // 	"Phone": "(212) 123-4567",
      // 	"Address": "123 Sesame St, New York, NY 12345",

      // },
    ],
    contactHolder: [
      {
        "First Name": "",
        "Last Name": "",
        "E-Mail": "",
        "Phone": "",
        "Address": "",

      },
    ],

  },
  actions: {



    setContactHolder: (field, e) => {
      e.preventDefault();
      const store = getStore();
      const newContactHolder = { ...store.contactHolder[0], [field]: e.target.value };
      setStore({ contactHolder: [newContactHolder] });
    },

      saveButton: (e) => {
				const store = getStore();
				const inputValues = store.contactHolder[0];
				console.log(inputValues.keys)

				// let input1 = document.querySelector('#input1')
				// if (inputValue === "") {
				// 	alert("The input cannot be empty");
				// } else {
				// 	const newObject = {
				// 		"Task Info": inputValue,
				// 		"ID Info": Info.ID,
				// 		"Created": Info.Date,
				// 		"Status": Info.Status,
				// 		"Memo": memo
				// 	};


				// 	const newList = [...store.list, newObject];
				// 	setStore({ list: newList });
				// 	setStore({ holder: "" }); // reset the input value after adding a new task
				// 	setStore({ memoHolder: "" });
				// }
				// input1.value = ""
			},
  

  }

}

















// =======================================================================
// =======================================================================








        <>
<form>
        <legend className="text-center mt-5">
    <h1>Add New Contact Information</h1>
  </legend><div className="m-3">
      <label htmlFor="exampleInputEmail1" className="form-label">
        First Name
      </label>
      <input
        type="text"
        className="form-control"
        id="First Name"
        aria-describedby="nameHelp"
        placeholder="First Name"
        onChange={(e) => actions.setContactHolder("First Name", e)}
        onKeyDown={(e) => actions.keyPress(e)} />
    </div><div className="m-3">
      <label htmlFor="exampleInputEmail1" className="form-label">
        Last Name
      </label>
      <input
        type="text"
        className="form-control"
        id="Last Name"
        aria-describedby="nameHelp"
        placeholder="Last Name"
        onChange={(e) => actions.setContactHolder("Last Name", e)}
        onKeyDown={(e) => actions.keyPress(e)} />
    </div><div className="m-3">
      <label htmlFor="exampleInputEmail1" className="form-label">
        Email
      </label>
      <input
        type="email"
        className="form-control"
        id="Email"
        aria-describedby="emailHelp"
        placeholder="Enter email"
        onChange={(e) => actions.setContactHolder("E-Mail", e)}
        onKeyDown={(e) => actions.keyPress(e)} />
    </div><div className="m-3">
      <label htmlFor="exampleInputPassword1" className="form-label">
        Phone
      </label>
      <input
        type="phone"
        className="form-control"
        id="Phone"
        placeholder="Enter phone"
        onChange={(e) => actions.setContactHolder("Phone", e)}
        onKeyDown={(e) => actions.keyPress(e)} />
    </div><div className="m-3">
      <label htmlFor="exampleInputPassword1" className="form-label">
        Address
      </label>
      <input
        type="address"
        className="form-control"
        id="Address"
        placeholder="Enter address"
        onChange={(e) => actions.setContactHolder("Address", e)}
        onKeyDown={(e) => actions.keyPress(e)} />
    </div><div className="d-grid gap-2 m-3">
      <button
        onClick={(e) => actions.saveButton(e)}
        className="btn btn-primary"
        type="button"
      >
        Save
      </button>
    </div><div className="m-3">
      <Link className="m-0 p-0" to="/contact">
        or get back to contacts
      </Link>
    </div>
      </form>
    </>



















// =======================================================================






formatPhoneNumber: (e) => {
  const input = e.target;
  const key = e.keyCode || e.charCode;
  const phoneNumber = input.value.replace(/\D/g, '');

  if (key !== 8 && key !== 46) {
    // Not backspace or delete key
    if (phoneNumber.length < 4) {
      input.value = phoneNumber;
    } else if (phoneNumber.length < 7) {
      input.value = `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;
    } else {
      input.value = `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6, 10)}`;
    }
  }
},







<div className="m-3">
<label htmlFor="exampleInputPassword1" className="form-label">
  Phone
</label>
<input
  type="phone"
  className="form-control"
  id="Phone"
  placeholder="Enter phone"
  onChange={(e)=>actions.setContactHolder("Phone", e)}

  onKeyDown={(e) => actions.inputValidation("Phone", e) && actions.keyPress("Phone",e)}
 
  

/>


keyPress: (field,e) => {
				const store = getStore();
				

				let formInput = document.querySelectorAll("input"),
					id = e.target.id,
					pos;

				if (e.key === "Enter") {
					console.log(store)

					if(field === "Phone"){
						console.log("in")
						getActions().formatPhoneNumber(field)
					}

					formInput.forEach((item, index) => {
						if (item.id === id) {
							pos = index;
							return;
						}
					});

					for (let i = pos + 1; i < formInput.length; i++) {
						if (formInput[i].value === "") {
							formInput[i].focus();
							return;
						}
					}

					for (let i = 0; i < formInput.length; i++) {
						if (formInput[i].value === "") {
							formInput[i].focus();
							return;
						}
					}
				}
			},

			formatPhoneNumber: (i) => {
				const input = i;
				const phoneNumber = input.value.replace(/\D/g, '');
			  
				
				  if (phoneNumber.length < 4) {
					input.value = phoneNumber;
				  } else if (phoneNumber.length < 7) {
					input.value = `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;
				  } else {
					input.value = `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6, 10)}`;
				  }
			  },